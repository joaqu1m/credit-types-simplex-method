O modelo simplex serve para encontrar a melhor solução em um cenário que você possui algumas diferentes opções. Essa decisão é baseada em X principais valores restritivos, comuns em cada uma das opções, por exemplo:

- Processamento
- Tempo

Em um cenário em que cada uma das opções gasta uma seleta quantidade de processamento e tempo, e o seu problema possui um valor máximo dessas variáveis.

O exemplo foi feito com dois diferentes valores restritivos, mas pode considerar de 1 para muitos;

Além disso, cada uma das opções precisa ter um determinado valor que precisa ser minimizado ou maximizado, por exemplo, uma máquina pode ter:

Eficiência: 400
Processamento Necessário: 20
Tempo Gasto: 40

*Detalhe: Os valores não precisam estar devidamente mensurados (sec, min, horas) para que sejam aplicados*
*Os valores PRECISAM ser inteiros para que o simplex funcione, por isso divisões são proibidas na biblioteca* *1

Vamos supor que esses valores são respectivos ao primeiro mês, e a sua otimização visa encontrar qual a melhor máquina para ficar ligada a cada mês, num período de 12 meses

Essa máquina tem uma concorrente que gasta mais processamento, mais possui um maior valor de eficiência. O método simplex vai calcular qual a melhor máquina a ser ligada em cada mês. Como não existe uma variável ou restrição que vai fazer com que elas mudem algum valor com o tempo, a máquina escolhida será a mesma todos os meses, mas mesmo assim o modelo foi útil


*1 - com numeros decimais as variaveis seriam infinitas

Atenção: as variáveis que serão otimizadas devem ser únicas. Não pode otimizar as duas, e sim utilizar as duas no cálculo da mesma otimização

Se voce quiser utilizar duas variaveis diferentes para cada mesma opção do modelo, tenha em mente que a primeira é independente da segunda , e só funciona se os dois forem do mesmo tipo (Maximização ou Minimização)

Isso não inclui as RESTRIÇÕES das variáveis. As restrições também devem ser completamente relacionadas

Quando você insere:
problema += 3000 * x1
é como se ele salvasse a string '3000 * x1' dentro do modelo para realizar os cálculos (na verdade ele salva um pulp.LpAffineExpression, mas pode ser visualizado como aquela string)

1.5*x1 = '1.5*x1'
1.5*x1 + 1.5 = '1.5*x1 + 1.5'
1.5*x1 + 1.5*x2 = '1.5*x1 + 1.5*x2'
10*1.5*x1 + 1.5*x2 = '15.0*x1 + 1.5*x2'
1.5*x1*10 + 1.5*x2 = '15.0*x1 + 1.5*x2'


Quando a primeira variável trabalha isolada, por exemplo:

modelo += 10000*x1 + 5000*x2 + 20000*x3 <= 20000, 'Capital Total Disponível'

A única consideração feita além do valor máximo possível que podemos pegar de cada variável, será o valor atribuído a ela, ou seja, vamos supor que o objetivo seja:

modelo += x1 + x2 + x3;

Isso quer dizer que todas as variáveis possuem o mesmo valor.
Fica ÓBVIO que a variável escolhida será a x2 para fazer todos os 'trabalhos', e o número retornado nessa variável será o próprio valor aplicado ao cálculo (ou seja, x2) e não 10000*x2

Caso o valor de x3 seja maior que o de x2, analisamos qual vale mais a pena pegar, por exemplo:

modelo += 2.5*x1 + x2 + x3, 'Total de Clientes Atendidos'
Utilizando a mesma restrição

Resultado:
(x1): 2.0
(x2): 0.0
(x3): 0.0
Total de Clientes Atendidos: 5.0

Vamos retornar o objetivo anteirior, em que todas as variáveis possuiam o mesmo valor;
Agora vamos pensar na aplicação de uma segunda restrição ao modelo (que pode ser por exemplo, de horas diárias de trabalho):

modelo += 3*x1 + 7*x2 + 4*x3 <= 12, 'Total de Clientes Processados'

Nesse caso, o modelo percebeu que não é mais possível pegar 2 vezes o x2 , já que ele vale 7 num contexto em que o máximo é 12. Agora serão feitos outros cálculos, e as outras variáveis agora podem ter mais valor com base na segunda restrição.

Com as restrições isoladas, podemos concluir que os máximos seriam:

Rest1:
x1 = 2
x2 = 4 (Por isso foi escolhida quando isolada, já que é um modelo de maximização)
x3 = 1

Rest2:
x1 = 4 (em um caso isolado, essa aqui teria sido a escolhida com 4 usos)
x2 = 1 (e sobram 5 horas)
x3 = 3

Já que todas elas tem o mesmo valor (como definido na função objetivo), o modelo vai tentar pegar a maior quantidade possível de variáveis com base nas duas restrições. Os valores máximo possíveis são:

x1 = 1
x2 = 1
x3 = 0

ou

x1 = 2
x2 = 0
x3 = 0


Quando você adiciona valores ao modelo, ao adicionar no sentido de comparação (com >= , <= ou ==) eles se tornam coefficients , caso contrário se tornam o objective

o método modelo.objective.value() retorna o resultado da sua operação objetivo após a definição do valor de cada variável



No exemplo:

modelo += 3*x1 + 5*x2 >= 100

x1 = variável
3 = coeficiente
tudo = restrição ou constraint
